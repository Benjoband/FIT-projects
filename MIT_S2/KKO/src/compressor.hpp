/**
 * @file compressor.hpp
 * @author Alexej Beňuš (xbenus01@stud.fit.vutbr.cz)
 * @brief Header file for implementation of LZ77 compression algorithm
 * @version 1.0
 * @date 2025-05-18
 *
 * @copyright Copyright (c) 2025
 *
 */
#ifndef COMPRESSOR_HPP
#define COMPRESSOR_HPP

#include "scanner.hpp"
#include <cstdint>
#include <iostream>
#include <string>
#include <vector>

namespace compressor
{

/**
 * @brief Representation of the Token generated by the LZ77 algorithm.
 *
 */
struct LZ77Token
{
        std::uint16_t offset;
        std::uint8_t length;
        std::uint8_t next;
};

/**
 * @brief Compressed block representation.
 *
 */
struct CompressedBlock
{
        std::size_t x, y;
        std::size_t width, height;

        ScanDirection scan_direction;

        bool compressed;                // Is the data compressed?
        std::vector<LZ77Token> tokens;  // If compressed
        std::vector<std::uint8_t> data; // The not compressed data
};

constexpr std::size_t SEARCH_BUFF = 256; // Size of the search buffer for LZ77
constexpr std::size_t LOOKAHEAD_BUFF =
    16; // Size of the lookahead buffer and maximum length of the match

} // namespace compressor

/**
 * @brief Implementation of the LZ77 compression algorithm.
 *
 */
class LZ77Compressor
{
    public:
        LZ77Compressor();
        ~LZ77Compressor() = default;

        /**
         * @brief Compress the block using LZ77 algorithm.
         *
         * @param block block to be compressed
         * @param data data to be compressed
         * @return compressor::CompressedBlock The compressed block
         */
        compressor::CompressedBlock compress(const Block &block, std::vector<uint8_t> &data);

    private:
        size_t buffer_size;
        size_t lookahead_size;

        /**
         * @brief Transfers all the values from the source block to the destination block, that
         * means x, y, width, height and scan direction.
         *
         * @param block block to be copied
         * @return compressor::CompressedBlock The new block
         */
        compressor::CompressedBlock createCompressedBlock(const Block &block);
};

std::vector<std::uint8_t> compressBlock(const std::vector<std::uint8_t> &data);

#endif // COMPRESSOR_HPP